# Form implementation generated from reading ui file 'gui.ui'
#
# Created by: PyQt6 UI code generator 6.4.2
#
# WARNING: Any manual changes made to this file will be lost when pyuic6 is
# run again.  Do not edit this file unless you know what you are doing.
from PyQt6 import QtCore, QtGui, QtWidgets
from PyQt6.QtWidgets import (QApplication, QWidget)
from handler import *
import warnings
warnings.filterwarnings("ignore")

class Ui_MainWindow(object):

    def setupUi(self, MainWindow, handler): #++
        self.MainWindow = MainWindow #++
        self.handler = handler #++

        self.MainWindow.setObjectName("MainWindow")
        self.MainWindow.resize(784, 544)
        self.centralwidget = QtWidgets.QWidget(parent=self.MainWindow)
        self.centralwidget.setObjectName("centralwidget")
        self.label_equation = QtWidgets.QLabel(parent=self.centralwidget)
        self.label_equation.setGeometry(QtCore.QRect(260, 30, 271, 51))
        self.label_equation.setObjectName("label_equation")

        self.label_info = QtWidgets.QLabel(parent=self.centralwidget)
        self.label_info.setGeometry(QtCore.QRect(50, 120, 200, 149))
        self.label_info.setMinimumSize(QtCore.QSize(200, 0))
        self.label_info.setObjectName("label_info")

        self.layoutWidget = QtWidgets.QWidget(parent=self.centralwidget)
        self.layoutWidget.setGeometry(QtCore.QRect(280, 130, 75, 149))
        self.layoutWidget.setObjectName("layoutWidget")

        self.layout_particle_group = QtWidgets.QVBoxLayout(self.layoutWidget)
        self.layout_particle_group.setContentsMargins(0, 0, 0, 0)
        self.layout_particle_group.setObjectName("layout_particle_group")

        self.rbtn_leptons = QtWidgets.QRadioButton(parent=self.layoutWidget)
        self.rbtn_leptons.setObjectName("rbtn_leptons")
        self.layout_particle_group.addWidget(self.rbtn_leptons)
        self.rbtn_leptons.type = 'leptons'

        self.rbtn_bosons = QtWidgets.QRadioButton(parent=self.layoutWidget)
        self.rbtn_bosons.setObjectName("rbtn_bosons")
        self.layout_particle_group.addWidget(self.rbtn_bosons)
        self.rbtn_bosons.type = 'bosons'

        self.rbtn_baryons = QtWidgets.QRadioButton(parent=self.layoutWidget)
        self.rbtn_baryons.setObjectName("rbtn_baryons")
        self.layout_particle_group.addWidget(self.rbtn_baryons)
        self.rbtn_baryons.type = 'baryons'

        self.rbtn_mesons = QtWidgets.QRadioButton(parent=self.layoutWidget)
        self.rbtn_mesons.setObjectName("rbtn_mesons")
        self.layout_particle_group.addWidget(self.rbtn_mesons)
        self.rbtn_mesons.type = 'mesons'

        self.btn_add_initial = QtWidgets.QPushButton(parent=self.centralwidget)
        self.btn_add_initial.setGeometry(QtCore.QRect(150, 290, 80, 23))
        self.btn_add_initial.setObjectName("btn_add_initial")

        self.btn_remove = QtWidgets.QPushButton(parent=self.centralwidget)
        self.btn_remove.setGeometry(QtCore.QRect(350, 290, 80, 23))
        self.btn_remove.setObjectName("btn_remove")

        self.btn_add_final = QtWidgets.QPushButton(parent=self.centralwidget)
        self.btn_add_final.setGeometry(QtCore.QRect(550, 290, 80, 23))
        self.btn_add_final.setObjectName("btn_add_final")



        self.table_initial = QtWidgets.QTableView(parent=self.centralwidget)
        self.table_initial.setGeometry(QtCore.QRect(20, 310, 361, 192))
        self.table_initial.setSelectionBehavior(QtWidgets.QAbstractItemView.SelectionBehavior.SelectRows)
        self.table_initial.setObjectName("table_initial")

        self.table_final = QtWidgets.QTableView(parent=self.centralwidget)
        self.table_final.setGeometry(QtCore.QRect(410, 320, 361, 192))
        self.table_final.setSelectionBehavior(QtWidgets.QAbstractItemView.SelectionBehavior.SelectRows)
        self.table_final.setObjectName("table_final")

        self.table_selection = QtWidgets.QTableView(parent=self.centralwidget)
        self.table_selection.setGeometry(QtCore.QRect(390, 100, 361, 192))
        self.table_selection.setSelectionBehavior(QtWidgets.QAbstractItemView.SelectionBehavior.SelectRows) #++
        self.table_selection.setSelectionMode(QtWidgets.QAbstractItemView.SelectionMode.SingleSelection) #++
        self.table_selection.setObjectName("table_selection")

        self.MainWindow.setCentralWidget(self.centralwidget)
        self.menubar = QtWidgets.QMenuBar(parent=self.MainWindow)
        self.menubar.setGeometry(QtCore.QRect(0, 0, 784, 20))
        self.menubar.setObjectName("menubar")
        self.MainWindow.setMenuBar(self.menubar)
        self.statusbar = QtWidgets.QStatusBar(parent=self.MainWindow)
        self.statusbar.setObjectName("statusbar")
        self.MainWindow.setStatusBar(self.statusbar)


        
    
        self.retranslateUi(self.MainWindow)
        QtCore.QMetaObject.connectSlotsByName(self.MainWindow)

        #----------------------------------------------------- #++
        # Connect radio buttons to a slot
        self.rbtn_leptons.setChecked(True)
        #self.changeSelection()
        self.selected_type = self.rbtn_leptons.type
        self.table_selection.setModel(self.handler.getTable(self.selected_type))


        self.rbtn_leptons.toggled.connect(self.onGroupButtonClicked)
        self.rbtn_bosons.toggled.connect(self.onGroupButtonClicked)
        self.rbtn_baryons.toggled.connect(self.onGroupButtonClicked)
        self.rbtn_mesons.toggled.connect(self.onGroupButtonClicked)

        self.btn_add_initial.clicked.connect(self.onAddInitialClicked)
        self.btn_remove.clicked.connect(self.onRemoveClicked)
        self.btn_add_final.clicked.connect(self.onAddFinalClicked)

        self.table_initial.clicked.connect(self.changeSelection)
        self.table_final.clicked.connect(self.changeSelection)
        self.selected_table = None

        self.table_initial.setModel(self.handler.getInitial())
        self.table_final.setModel(self.handler.getFinal())

        #resize tables
        for i in range(20):
            self.table_selection.horizontalHeader().setSectionResizeMode(i, QtWidgets.QHeaderView.ResizeMode.ResizeToContents)        
            self.table_initial.horizontalHeader().setSectionResizeMode(i, QtWidgets.QHeaderView.ResizeMode.ResizeToContents)        
            self.table_final.horizontalHeader().setSectionResizeMode(i, QtWidgets.QHeaderView.ResizeMode.ResizeToContents) 
    







    def changeSelection(self):
            try:
                new_selection = self.MainWindow.sender()
                if new_selection == self.table_initial:
                    self.selected_table = 'initial'
                    self.table_final.selectionModel().clearSelection()
                else:
                    self.selected_table = 'final'
                    self.table_initial.selectionModel().clearSelection()
            except:
                print('error of changeSelection()')

    def onGroupButtonClicked(self):
        radioButton = self.MainWindow.sender()
        if radioButton.isChecked():
            self.selected_type = radioButton.type
            data = self.handler.getTable(self.selected_type)
            self.table_selection.setModel(data)

    def onAddInitialClicked(self):
        try:
            selected_index = self.table_selection.selectionModel().selectedRows()[0].row()
            self.handler.addInitial(self.selected_type, selected_index)
            self.updateInitialTable()
        except:
            print('please select a particle first')

    def onAddFinalClicked(self):
        try:
            selected_index = self.table_selection.selectionModel().selectedRows()[0].row()
            self.handler.addFinal(self.selected_type, selected_index)
            self.updateFinalTable()
        except:
            print('please select a particle first')

    def onRemoveClicked(self):
        self.removeSelection()
        self.updateInitialTable()
        self.updateFinalTable()

    def updateInitialTable(self):
        data = self.handler.getInitial()
        self.table_initial.setModel(data)
        
    def updateFinalTable(self):
        data = self.handler.getFinal()
        self.table_final.setModel(data)


    def removeSelection(self):
        try:
            if self.selected_table == 'initial':
                selected_index = self.table_initial.selectionModel().selectedRows()[0].row()
                self.handler.removeInitial(selected_index)
            else:
                selected_index = self.table_final.selectionModel().selectedRows()[0].row()
                self.handler.removeFinal(selected_index)
        except:
            print('error in removal')


    def keyPressEvent(self):
        if self.MainWindow.event.key() == QtCore.Qt.Key.Key_Delete:
            print("Delete key pressed")
            if self.selected_table != None:
                self.removeSelection()
        else:
            super().keyPressEvent(self.MainWindow.event)

        
#---------------------------------------------------------------------------------

#---------------------------------------------------------------------------------

    def retranslateUi(self, MainWindow):
        _translate = QtCore.QCoreApplication.translate
        MainWindow.setWindowTitle(_translate("MainWindow", "MainWindow"))
        self.label_equation.setText(_translate("MainWindow", "equation"))
        self.label_info.setText(_translate("MainWindow", "Info"))
        self.rbtn_leptons.setText(_translate("MainWindow", "Leptons"))
        self.rbtn_bosons.setText(_translate("MainWindow", "Bosons"))
        self.rbtn_baryons.setText(_translate("MainWindow", "Baryons"))
        self.rbtn_mesons.setText(_translate("MainWindow", "Mesons"))
        self.btn_add_initial.setText(_translate("MainWindow", "add initial"))
        self.btn_add_final.setText(_translate("MainWindow", "add final"))
        self.btn_remove.setText(_translate("MainWindow", "remove"))


########################################################################
########################################################################
########################################################################
if __name__ == "__main__":
    import sys
    handler = Handler()

    app = QApplication(sys.argv)
    MainWindow = QtWidgets.QMainWindow()
    ui = Ui_MainWindow()
    ui.setupUi(MainWindow, handler)
    
    MainWindow.show()
    sys.exit(app.exec())
    
